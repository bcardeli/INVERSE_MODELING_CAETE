# Excluir o conteúdo da pasta de resultados se "NO MATCH"
delete_folder_contents(file.path("/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs", result_folder))
# Função para deletar todos os arquivos dentro de uma pasta, mas não a pasta em si
delete_folder_contents <- function(folder_path) {
if (dir_exists(folder_path)) {
items <- dir_ls(folder_path, recurse = TRUE)
if (length(items) > 0) {
cat("Tentando deletar os seguintes arquivos:\n")
print(items)
file_delete(items)
cat("Arquivos deletados com sucesso.\n")
} else {
cat("Nenhum arquivo encontrado para deletar em:", folder_path, "\n")
}
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
# Substituir pelo caminho correto da pasta onde os arquivos estão sendo salvos
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder # Aqui você deve usar o nome da pasta da iteração, lido de run_name.txt
# Caminho completo da pasta cujos arquivos devem ser deletados
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Excluir o conteúdo da pasta antes da próxima iteração, caso ocorra 'NO MATCH'
delete_folder_contents(folder_path)
# Função para deletar todos os arquivos dentro de uma pasta, mas não a pasta em si
delete_folder_contents <- function(folder_path) {
if (dir.exists(folder_path)) {  # Verifica se o diretório existe
items <- list.files(folder_path, full.names = TRUE, recursive = TRUE)
if (length(items) > 0) {
cat("Tentando deletar os seguintes arquivos:\n")
print(items)
file_delete(items)
cat("Arquivos deletados com sucesso.\n")
} else {
cat("Nenhum arquivo encontrado para deletar em:", folder_path, "\n")
}
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
# Substituir pelo caminho correto da pasta onde os arquivos estão sendo salvos
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder # Aqui você deve usar o nome da pasta da iteração, lido de run_name.txt
# Caminho completo da pasta cujos arquivos devem ser deletados
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Excluir o conteúdo da pasta antes da próxima iteração, caso ocorra 'NO MATCH'
delete_folder_contents(folder_path)
# Função para deletar todos os arquivos dentro de uma pasta, mas não a pasta em si
delete_folder_contents <- function(folder_path) {
if (dir.exists(folder_path)) {  # Verifica se o diretório existe
items <- list.files(folder_path, full.names = TRUE, recursive = TRUE)
if (length(items) > 0) {
cat("Tentando deletar os seguintes arquivos:\n")
print(items)
file.remove(items)
cat("Arquivos deletados com sucesso.\n")
} else {
cat("Nenhum arquivo encontrado para deletar em:", folder_path, "\n")
}
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
# Substituir pelo caminho correto da pasta onde os arquivos estão sendo salvos
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder # Aqui você deve usar o nome da pasta da iteração, lido de run_name.txt
# Caminho completo da pasta cujos arquivos devem ser deletados
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Excluir o conteúdo da pasta antes da próxima iteração, caso ocorra 'NO MATCH'
delete_folder_contents(folder_path)
# Função para deletar todos os arquivos dentro de uma pasta, mas não a pasta em si
delete_folder_contents <- function(folder_path) {
if (dir.exists(folder_path)) {  # Verifica se o diretório existe
items <- list.files(folder_path, full.names = TRUE, recursive = TRUE)
if (length(items) > 0) {
cat("Tentando deletar os seguintes arquivos:\n")
print(items)
unlink(items, recursive = TRUE, force = TRUE)
cat("Arquivos deletados com sucesso.\n")
} else {
cat("Nenhum arquivo encontrado para deletar em:", folder_path, "\n")
}
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
# Substituir pelo caminho correto da pasta onde os arquivos estão sendo salvos
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder # Aqui você deve usar o nome da pasta da iteração, lido de run_name.txt
# Caminho completo da pasta cujos arquivos devem ser deletados
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Excluir o conteúdo da pasta antes da próxima iteração, caso ocorra 'NO MATCH'
delete_folder_contents(folder_path)
# Função para deletar toda a pasta
delete_folder <- function(folder_path) {
if (dir.exists(folder_path)) {  # Verifica se o diretório existe
unlink(folder_path, recursive = TRUE, force = TRUE)
cat("Pasta e todo o conteúdo deletados com sucesso:", folder_path, "\n")
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
print("NO MATCH!E Excluindo o conteúdo da pasta e reiniciando...\n")
# Substituir pelo caminho correto da pasta onde os arquivos estão sendo salvos
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder # Aqui você deve usar o nome da pasta da iteração, lido de run_name.txt
# Caminho completo da pasta cujos arquivos devem ser deletados
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Excluir o conteúdo da pasta antes da próxima iteração, caso ocorra 'NO MATCH'
delete_folder(folder_path)
install.packages("beepr")
beepr::beep(3)
beepr::beep(2)
beepr::beep(4)
beepr::beep(5)
beepr::beep(6)
beepr::beep(7)
beepr::beep(8)
beepr::beep(9)
beepr::beep(10)
beepr::beep(11)
beepr::beep(1)
beepr::beep(3)
beepr::beep(3) #tan-tan-tan-tan beat the drums!!!!!
beepr::beep(3) #tan-tan-tan-tan beat the drums!!!!!
beepr::beep(3) #tan-tan-tan-tan beat the drums!!!!!
# In case of “NO MATCH” (see below) — Function to delete the output file
delete_folder <- function(folder_path) {
if (dir.exists(folder_path)) {  # Check if the directory exists
unlink(folder_path, recursive = TRUE, force = TRUE)
cat("Pasta e todo o conteúdo deletados com sucesso:", folder_path, "\n")
} else {
cat("O diretório não existe:", folder_path, "\n")
}
}
# Deleting "NO MATCH!" outputs
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Read folder name from "run_name.txt" file
result_folder <- readLines(run_name)
# Define the current iteration's results folder name
run_name <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/src/run_name.txt"
# Read folder name from "run_name.txt" file
result_folder <- readLines(run_name)
# Define the current iteration's results folder name
run_name <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/src/run_name.txt"
# Read folder name from "run_name.txt" file
result_folder <- readLines(run_name)
# Debug: Show folder name read from file
cat("Folder name, read from run_name.txt:", result_folder, "\n")
# Debug: View the automatically generated folder name
cat("Folder name generated for iteration:", result_folder, "\n")
# Debug: Show folder name read from file
cat("Folder name, read from run_name.txt:", result_folder, "\n")
# Debug: View the automatically generated folder name
cat("Folder name generated for iteration:", result_folder, "\n")
# Debug: View the full path to the results folder
cat("Full path to the results folder:", file.path("/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs", result_folder), "\n")
# Deleting "NO MATCH!" outputs
output_base_path <- "/home/barbara/Documentos/CAETE-DVM_Branch/CAETE-DVM/outputs"
out_folder <- result_folder
folder_path <- file.path(output_base_path, result_folder)
print(folder_path)
# Bye-bye...
delete_folder(folder_path)
library(TPD)
library(dplyr)
library(ggplot2)
##import the tables
# Carregar os dados
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3)
##import the tables
# Carregar os dados
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["rcp4_inv3"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
####wood_density_4.5
wood=table$dwood #selecting a trait from table
TPD_wood=TPDs(species = sp_caete,wood,alpha = 1) #calculating TPDs
FD_wood=REND(TPDs=TPD_wood) #calculating all the diversity facets
FD_wood #accessing the values for diversity facets
dissim(TPD_wood) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_wood$TPDs, function(x) max(x)))
plot(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["inv_ssp4"]],
col = adjustcolor("#BF9169", alpha.f = 0.4), border = "black", lwd = 1.5)
}
####G1_4.5
####g1 (evap parameter)
g1=table$g1 #selecting a trait from table
TPD_g1=TPDs(species = sp_caete,g1,alpha = 1) #calculating TPDs
#plotTPD(TPD_g1) #ploting TPD as default
FD_g1=REND(TPDs=TPD_g1) #calculating all the diversity facets
FD_g1 #accessing the values for diversity facets
dissim(TPD_g1) #calculating dissimilarity between
#TO GRAPH
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_g1$TPDs, function(x) max(x)))
plot(TPD_g1$data$evaluation_grid, TPD_g1$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_g1$TPDs)) {
polygon(TPD_g1$data$evaluation_grid, TPD_g1$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_g1$TPDs)) {
polygon(TPD_g1$data$evaluation_grid, TPD_g1$TPDs[["inv_ssp4"]],
col = adjustcolor("#F2E205", alpha.f = 0.4), border = "black", lwd = 1.5)
}
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp4_one.csv')
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp_one.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3,table_rcp4_inv3)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3,table_rcp4_inv3)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp_one.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3,table_rcp4_inv3)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
##import the tables
# Carregar os dados
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp_one.csv')
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp4_one.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3,table_rcp4_inv4)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
library(TPD)
library(dplyr)
library(ggplot2)
##import the tables
# Carregar os dados
table_nclim=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/RUN_BASE/TABLES/traits_nclim.csv')
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
table_rcp4_inv4=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_one/traits_inv_ssp4_one.csv')
table_rcp4_inv5=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4_two/traits_inv_ssp4_two.csv')
#creating tables (joining all tables)
table=rbind(table_nclim,table_rcp4_inv3,table_rcp4_inv4,table_rcp4_inv5)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_two"]],
col = adjustcolor("#ABD904", alpha.f = 0.4), border = "black", lwd = 1.5)
}
#table_rcp4_inv=read.csv('/home/barbara/Documentos/SENCKENBERG/OUTPUTS_inverse_model/INVERSE_TEST_manual/one/TABLES/traits_rcp4_inv.csv')
table_rcp4_inv3=read.csv('/home/barbara/Documentos/SENCKENBERG/RESULTS_INVMODEL/inv_ssp4/traits_inv_ssp4.csv')
View(table_rcp4_inv3)
View(table_rcp4_inv4)
View(table_rcp4_inv5)
####wood_density_4.5
wood=table$dwood #selecting a trait from table
TPD_wood=TPDs(species = sp_caete,wood,alpha = 1) #calculating TPDs
FD_wood=REND(TPDs=TPD_wood) #calculating all the diversity facets
FD_wood #accessing the values for diversity facets
dissim(TPD_wood) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_wood$TPDs, function(x) max(x)))
plot(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
# Loop para desenhar as curvas e preenchê-las com transparência
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["nclim"]],
col = adjustcolor("#D9D9D9", alpha.f = 0.5), border = "red", lwd = 1.5)
}
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["inv_ssp4"]],
col = adjustcolor("#BF9169", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#734E39", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_awood$TPDs)) {
polygon(TPD_awood$data$evaluation_grid, TPD_awood$TPDs[["inv_ssp4_two"]],
col = adjustcolor("#D98943", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_awood$data$evaluation_grid, TPD_awood$TPDs[["inv_ssp4_two"]],
col = adjustcolor("#D98943", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_wood$TPDs)) {
polygon(TPD_wood$data$evaluation_grid, TPD_wood$TPDs[["inv_ssp4_two"]],
col = adjustcolor("#D98943", alpha.f = 0.4), border = "black", lwd = 1.5)
}
#creating tables (joining all tables)
table=rbind(table_rcp4_inv3,table_rcp4_inv4,table_rcp4_inv5)
#considering the climate and the approach as spp
sp_caete=table$clima_approach
####sla_4.5
sla = table$sla #selecting a trait from table
TPD_sla = TPDs(species = sp_caete,sla,alpha = 1) #calculating TPDs
#plotTPD(TPD_sla) #ploting TPD as default
FD_sla=REND(TPDs=TPD_sla) #calculating all the diversity facets
FD_sla #accessing the values for diversity facets
dissim(TPD_sla) #calculating dissimilarity between
#TO GRAPH
# Calcule o máximo de todos os valores em todas as curvas
max_value <- max(sapply(TPD_sla$TPDs, function(x) max(x)))
plot(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[[1]], type = "n",
ylim = c(0, max_value), ylab = "")
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4"]],
col = adjustcolor("#9BBF65", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_one"]],
col = adjustcolor("#3B7302", alpha.f = 0.4), border = "black", lwd = 1.5)
}
for (i in 1:length(TPD_sla$TPDs)) {
polygon(TPD_sla$data$evaluation_grid, TPD_sla$TPDs[["inv_ssp4_two"]],
col = adjustcolor("#ABD904", alpha.f = 0.4), border = "black", lwd = 1.5)
}
